from torch import nn
from torch.nn import functional as F
import torch
from torchvision import models
from functools import partial
import torchvision

res34_path = r'D:\Study\Code\paper\resnet34-333f7ec4.pth'

class FReLU(nn.Module):
   r""" FReLU formulation. The funnel condition has a window size of kxk. (k=3 by default)
   """
   def __init__(self, in_channels):
       super().__init__()
       self.conv_frelu = nn.Conv2d(in_channels, in_channels, 3, 1, 1, groups=in_channels)
       self.bn_frelu = nn.BatchNorm2d(in_channels)

   def forward(self, x):
       x1 = self.conv_frelu(x)
       x1 = self.bn_frelu(x1)
       x = torch.max(x, x1)
       return x

nonlinear = partial(FReLU)

class _DenseLayer(nn.Sequential):
    def __init__(self, input_features, out_features):
        super(_DenseLayer, self).__init__()

        # self.add_module('relu2', nn.ReLU(inplace=True)),
        self.add_module('conv1', nn.Conv2d(input_features, out_features,
                                           kernel_size=3, stride=1, padding=2, bias=True)),
        self.add_module('norm1', nn.BatchNorm2d(out_features)),
        self.add_module('relu1', nonlinear(out_features)),
        self.add_module('conv2', nn.Conv2d(out_features, out_features,
                                           kernel_size=3, stride=1, bias=True)),
        self.add_module('norm2', nn.BatchNorm2d(out_features))
        # double check the norm1 comment if necessary and put norm after conv2

    def forward(self, x):
        x1, x2 = x

        new_features = super(_DenseLayer, self).forward(F.relu(x1))  # F.relu()
        # if new_features.shape[-1]!=x2.shape[-1]:
        #     new_features =F.interpolate(new_features,size=(x2.shape[2],x2.shape[-1]), mode='bicubic',
        #                                 align_corners=False)
        return 0.5 * (new_features + x2), x2

class _BEM(nn.Sequential):
    def __init__(self, num_layers, input_features, out_features):
        super(_BEM, self).__init__()
        for i in range(num_layers):
            layer = _DenseLayer(input_features, out_features)
            self.add_module('denselayer%d' % (i + 1), layer)
            input_features = out_features

class ChannelwiseAttention(nn.Module):
    def __init__(self, in_channels,out_channels):
        super(ChannelwiseAttention, self).__init__()

        self.in_channels = in_channels
        self.out_channels = out_channels
        self.conv1 = nn.Conv2d(in_channels,out_channels,kernel_size=1, stride=1)
        self.linear_1 = nn.Linear(self.in_channels, self.in_channels // 4)
        self.linear_2 = nn.Linear(self.in_channels // 4, self.in_channels)

        self.gamma = nn.Parameter(torch.zeros(1))  # 5.14额外添加

    def forward(self, input_):
        n_b, n_c, h, w = input_.size()

        feats = F.adaptive_avg_pool2d(input_, (1, 1)).view((n_b, n_c))
        feats = F.relu(self.linear_1(feats))
        feats = torch.sigmoid(self.linear_2(feats))

        feats = feats.view((n_b, n_c, 1, 1))
        feats = feats.expand_as(input_).clone()

        feats = self.gamma*feats + input_ # 5.14额外添加
        feats = self.conv1(feats)

        return feats

class ECM(nn.Module):
    def __init__(self,in_channels):
        super(ECM, self).__init__()
        self.up_conv1_relu = nn.Sequential(
            nn.Conv2d(in_channels, 32, kernel_size=1, stride=1),
            nn.ReLU()
        )
        self.CA = ChannelwiseAttention(32,5)
        self.up_conv1 = nn.Conv2d(5, 2, kernel_size=1, stride=1)

        self.down_conv3_relu = nn.Sequential(
            nn.Conv2d(64, 32, kernel_size=3,padding=1, stride=1),
            nn.ReLU()
        )
        self.down_conv1 = nn.Conv2d(32, 2, kernel_size=1, stride=1)
        self.middle_conv3_relu = nn.Sequential(
            nn.Conv2d(2, 2, kernel_size=3,padding=1, stride=1),
            nn.ReLU()
        )

    def forward(self,x1,x2):
        #x1 = F.sigmoid(x1)
        x1_up = self.up_conv1_relu(x1)
        #print(x1_up.shape,x2.shape)
        x2 = torch.concat((x1_up,x2),dim=1)

        x1_up = self.CA(x1_up)
        x1 = x1*x1_up
        x1 = self.up_conv1(x1)
        x2 = self.down_conv3_relu(x2)
        x2 = self.down_conv1(x2)
        fusion = x2+x1
        fusion = self.middle_conv3_relu(fusion)
        seg = x2*fusion

        return seg

class SingleConvBlock(nn.Module):
    def __init__(self, in_features, out_features, stride,
                 use_bs=True
                 ):
        super(SingleConvBlock, self).__init__()
        self.use_bn = use_bs
        self.conv = nn.Conv2d(in_features, out_features, 1, stride=stride,
                              bias=True)
        self.bn = nn.BatchNorm2d(out_features)

    def forward(self, x):
        x = self.conv(x)
        if self.use_bn:
            x = self.bn(x)
        return x

class DoubleConvBlock(nn.Module):
    def __init__(self, in_features, mid_features,
                 out_features=None,
                 stride=1,
                 use_act=True):
        super(DoubleConvBlock, self).__init__()

        self.use_act = use_act
        if out_features is None:
            out_features = mid_features
        self.conv1 = nn.Conv2d(in_features, mid_features,
                               3, padding=1, stride=stride)
        self.bn1 = nn.BatchNorm2d(mid_features)
        self.act1 = nonlinear(mid_features)
        self.conv2 = nn.Conv2d(mid_features, out_features, 3, padding=1)
        self.bn2 = nn.BatchNorm2d(out_features)
        self.act2 = nonlinear(out_features)
        # self.relu = nn.ReLU(inplace=True)

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.act1(x)
        x = self.conv2(x)
        x = self.bn2(x)
        if self.use_act:
            x = self.act2(x)
        return x

class UpConvBlock(nn.Module):
    def __init__(self, in_features, up_scale):
        super(UpConvBlock, self).__init__()
        self.up_factor = 2
        self.constant_features = 16

        layers = self.make_deconv_layers(in_features, up_scale)
        assert layers is not None, layers
        self.features = nn.Sequential(*layers)

    def make_deconv_layers(self, in_features, up_scale):
        layers = []
        all_pads=[0,0,1,3,7,15]
        for i in range(up_scale):
            kernel_size = 2 ** up_scale
            pad = all_pads[up_scale]  # kernel_size-1
            out_features = self.compute_out_features(i, up_scale)
            layers.append(nn.Conv2d(in_features, out_features, 1))
            layers.append(nonlinear(out_features))
            layers.append(nn.ConvTranspose2d(
                out_features, out_features, kernel_size, stride=2, padding=pad))
            in_features = out_features
        return layers

    def compute_out_features(self, idx, up_scale):
        return 1 if idx == up_scale - 1 else self.constant_features

    def forward(self, x):
        return self.features(x)

class DoubleConv(nn.Module):
    """(convolution => [BN] => ReLU) * 2"""

    def __init__(self, in_channels, out_channels, mid_channels=None):
        super().__init__()
        if not mid_channels:
            mid_channels = out_channels
        self.double_conv = nn.Sequential(
            nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1),
            nn.BatchNorm2d(mid_channels),
            nn.ReLU(inplace=True),
            nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True)
        )

    def forward(self, x):
        return self.double_conv(x)

class Up(nn.Module):
    """Upscaling then double conv"""

    def __init__(self, in_channels, out_channels, bilinear=False):
        super().__init__()

        # if bilinear, use the normal convolutions to reduce the number of channels
        if bilinear:
            self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
            self.conv = DoubleConv(in_channels, out_channels, in_channels // 2)
        else:
            self.up = nn.ConvTranspose2d(in_channels , in_channels // 2, kernel_size=2, stride=2)
            self.conv = DoubleConv(in_channels, out_channels)


    def forward(self, x1, x2):
        x1 = self.up(x1)
        # input is CHW
        diffY = x2.size()[2] - x1.size()[2]
        diffX = x2.size()[3] - x1.size()[3]

        x1 = F.pad(x1, [diffX // 2, diffX - diffX // 2,
                        diffY // 2, diffY - diffY // 2])
        x = torch.cat([x2, x1], dim=1)
        return self.conv(x)

class OutConv(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(OutConv, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=1)
        self.up = nn.ConvTranspose2d(in_channels, in_channels, kernel_size=2, stride=2)

    def forward(self, x):
        x = self.up(x)
        return self.conv(x)

class DTCNet(nn.Module):
    def __init__(self, n_classes,pretrained=True):
        super(DTCNet,self).__init__()
        resnet = models.resnet34()
        if pretrained:
            resnet.load_state_dict(torch.load(res34_path))
        self.layer0 = nn.Sequential(resnet.conv1, resnet.bn1, resnet.relu, resnet.maxpool)
        self.layer1, self.layer2, self.layer3, self.layer4 = resnet.layer1, resnet.layer2, resnet.layer3, resnet.layer4

        self.up1 = Up(512, 256)
        self.up2 = Up(256, 128)
        self.up3 = Up(128, 64)
        self.up4 = Up(64, 32)
        self.conv1 = nn.Conv2d(64, 32, kernel_size=1, stride=1)
        self.outc = OutConv(32, 32)

        self.block_1 = DoubleConvBlock(64, 128, 128, stride=2)
        self.dblock_2 = _BEM(2, 128, 256)
        self.dblock_3 = _BEM(3, 256, 512)
        self.dblock_4 = _BEM(3, 512, 512)
        self.maxpool = nn.MaxPool2d(kernel_size=(2, 2), stride=(2, 2))

        # left skip connections, figure in Journal
        self.side_1 = SingleConvBlock(128, 256, 2)
        self.side_2 = SingleConvBlock(256, 512, 2)
        self.side_3 = SingleConvBlock(512, 512, 1)

        # right skip connections, figure in Journal
        self.pre_dense_2down = SingleConvBlock(128, 256, 2, use_bs=False)
        self.pre_dense_2up = SingleConvBlock(128, 256, 1)
        self.pre_dense_3up = SingleConvBlock(256, 512, 1)
        self.pre_dense_3down = SingleConvBlock(256, 512, 2, use_bs=False)
        self.pre_dense_4 = SingleConvBlock(512, 512, 1)

        # USNet
        self.up_block_1 = UpConvBlock(128, 3)
        self.up_block_2 = UpConvBlock(256, 3)
        self.up_block_3 = UpConvBlock(512, 4)
        self.up_block_4 = UpConvBlock(512, 5)
        self.block_cat = SingleConvBlock(4, 1, stride=1, use_bs=False)

        self.ECM = ECM(5)

    def forward(self,x):
        x1 = self.layer0(x)
        x2 = self.layer1(x1)

        #BEM1
        b1 = self.block_1(x2)
        b1_side = self.side_1(b1)

        #BEM2
        x3 = self.layer2(x2)
        b2_pre_dense = self.pre_dense_2up(b1)
        b2,_ = self.dblock_2([b1+x3,b2_pre_dense])
        b2_down = self.maxpool(b2)
        b2_add = b2_down + b1_side
        b2_side = self.side_2(b2_add)

        #BEM3
        x4 = self.layer3(x3)
        b3_pre_dense_128 = self.pre_dense_2down(b1)
        b3_pre_dense = self.pre_dense_3up(b2_down+b3_pre_dense_128)
        b3,_ = self.dblock_3([b2_add+x4, b3_pre_dense])
        b3_down = self.maxpool(b3)
        b3_add = b3_down + b2_side
        b3_side = self.side_3(b3_add)

        #BEM4
        x5 = self.layer4(x4)
        b4_pre_dense_256 = self.pre_dense_3down(b3_pre_dense_128)
        b4_pre_dense = self.pre_dense_4(b4_pre_dense_256 + b3_down)
        b4, _ = self.dblock_4([b3_add+x5, b4_pre_dense])
        b4 = b4 + b3_side

        out_1 = self.up_block_1(b1)
        out_2 = self.up_block_2(b2)
        out_3 = self.up_block_3(b3)
        out_4 = self.up_block_4(b4)
        edge = [out_1, out_2, out_3, out_4]

        # decoding
        x = self.up1(x5, x4)
        x = self.up2(x, x3)
        x = self.up3(x, x2)
        x1 = self.conv1(x1)
        x = self.up4(x, x1)
        x = self.outc(x)
        x = F.interpolate(
            x,
            [512, 512],
            mode='bilinear')

        # concatenate multiscale outputs串联多尺度输出
        block_cat = torch.cat(edge, dim=1)  # Bx4xHxW
        block_cat = self.block_cat(block_cat)  # Bx1xHxW

        # return results
        edge.append(block_cat)
        edge_pro = torch.cat(edge, dim=1)
        out_seg = self.ECM(edge_pro,x)
        return edge,out_seg
